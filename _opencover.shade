use import="Json"
use import="Environment"

default NO_PARALLEL_TEST_PROJECTS='${E("NO_PARALLEL_TEST_PROJECTS")}'
default KOREBUILD_TEST_DNXCORE='${E("KOREBUILD_TEST_DNXCORE")}'

@{/*

opencover
    Run opencover on unittest in your project

projectFile=''
    Required. Path to the test project.json to execute

coverageFile=''
	Required. Path to the coverage file

configuration='Debug'
	Optional. build configuration to use

*/}

@{
	var sourcesFiles = Files.Include("src/**/project.json").Exclude("**/bin/*/app/project.json").ToList();

	var openCoverLocation = Path.Combine(Path.Combine(Path.Combine("packages"
		, "OpenCover")
		, "tools")
		, "OpenCover.Console.exe");

	var projectFolder = Path.GetDirectoryName(projectFile);
	Log.Info("projectFolder: " + projectFolder);
	var projectPath  = Path.Combine(projectFolder, "project.json");
	var results = Path.Combine(projectFolder, "xunit-results.xml");

	var dnxLocation = @"%LocalAppData%\Microsoft\dotnet\dotnet.exe";
	var target = '-target:"' + dnxLocation +  '" ';

	var projectText = File.ReadAllText(projectFile);
	var project = (JsonObject)Json.Deserialize(projectText);
	var targetFrameworks = project.ValueAsJsonObject("frameworks");
	foreach(var targetFramework in targetFrameworks.Keys)
	{
		var targetArgs = '-targetargs:" test ""' + projectFile + '"" -f ' + targetFramework + ' -xml ""' + results + '"" -nologo -parallel none" ';
		var args = target + targetArgs + '-oldstyle -output:"' + coverageFile + '" -register:user -filter:"+[*]* -[xunit*]* -[*Tests]* -[*]*Migrations.*" -returntargetcode';

		if (File.Exists(coverageFile))
		{
			args += " -mergeoutput";
		}

		Exec(openCoverLocation, args);
	}
}
